apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      serviceAccountName: "{{ .Release.Name }}-serviceaccount"
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: kubernetes.io/hostname
      # imagePullSecrets:
      # - name: regcred
      securityContext:
        fsGroup: 65532
      containers:
      - name: "{{ .Release.Name }}-pod"
        image: "{{ .Values.image.user }}/{{ .Values.image.name }}:{{ .Values.image.version }}"
        imagePullPolicy: Always
        ports:
        - name: docker
          containerPort: {{ .Values.ports.docker }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: {{ .Values.routes.health }}
            port: {{ .Values.ports.docker }}
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: {{ .Values.routes.health }}
            port: {{ .Values.ports.docker }}
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        envFrom:
        - secretRef:
            name: "{{ .Release.Name }}-secret"
        - configMapRef:
            name: "{{ .Release.Name }}-config"
        securityContext:
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        volumeMounts:
        - name: "{{ .Release.Name }}-cert"
          mountPath: /etc/tls
        # - name: "{{ .Release.Name }}-config"
        #   mountPath: /etc/matchmakerbot
        - name: temp
          mountPath: /tmp
      volumes:
      - name: "{{ .Release.Name }}-cert"
        secret:
          secretName: "{{ .Release.Name }}-cert"
      # - name: "{{ .Release.Name }}-config"
      #   configMap:
      #     name: "{{ .Release.Name }}-config"
      - name: temp
        emptyDir: {}